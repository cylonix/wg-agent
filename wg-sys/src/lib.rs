/* automatically generated by rust-bindgen 0.55.1 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
pub type in_port_t = u16;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
#[test]
fn bindgen_test_layout_in6_addr() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in6_addr>())).__in6_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__in6_u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_zero as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_flowinfo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_scope_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
impl wgdevice_flag {
    pub const __WGDEVICE_F_ALL: wgdevice_flag = wgdevice_flag::WGDEVICE_F_REPLACE_PEERS;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wgdevice_flag {
    WGDEVICE_F_REPLACE_PEERS = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wgdevice_attribute {
    WGDEVICE_A_UNSPEC = 0,
    WGDEVICE_A_IFINDEX = 1,
    WGDEVICE_A_IFNAME = 2,
    WGDEVICE_A_PRIVATE_KEY = 3,
    WGDEVICE_A_PUBLIC_KEY = 4,
    WGDEVICE_A_FLAGS = 5,
    WGDEVICE_A_LISTEN_PORT = 6,
    WGDEVICE_A_FWMARK = 7,
    WGDEVICE_A_PEERS = 8,
    __WGDEVICE_A_LAST = 9,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec64 {
    pub tv_sec: i64,
    pub tv_nsec: i64,
}
#[test]
fn bindgen_test_layout_timespec64() {
    assert_eq!(
        ::std::mem::size_of::<timespec64>(),
        16usize,
        concat!("Size of: ", stringify!(timespec64))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec64>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec64>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec64),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec64>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec64),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wgallowedip {
    pub family: u16,
    pub __bindgen_anon_1: wgallowedip__bindgen_ty_1,
    pub cidr: u8,
    pub next_allowedip: *mut wgallowedip,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wgallowedip__bindgen_ty_1 {
    pub ip4: in_addr,
    pub ip6: in6_addr,
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_wgallowedip__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wgallowedip__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(wgallowedip__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wgallowedip__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wgallowedip__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgallowedip__bindgen_ty_1>())).ip4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wgallowedip__bindgen_ty_1),
            "::",
            stringify!(ip4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgallowedip__bindgen_ty_1>())).ip6 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wgallowedip__bindgen_ty_1),
            "::",
            stringify!(ip6)
        )
    );
}
#[test]
fn bindgen_test_layout_wgallowedip() {
    assert_eq!(
        ::std::mem::size_of::<wgallowedip>(),
        32usize,
        concat!("Size of: ", stringify!(wgallowedip))
    );
    assert_eq!(
        ::std::mem::align_of::<wgallowedip>(),
        8usize,
        concat!("Alignment of ", stringify!(wgallowedip))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgallowedip>())).family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wgallowedip),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgallowedip>())).cidr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(wgallowedip),
            "::",
            stringify!(cidr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgallowedip>())).next_allowedip as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wgallowedip),
            "::",
            stringify!(next_allowedip)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wg_peer_flag_ {
    WGPEER_REMOVE_ME = 1,
    WGPEER_REPLACE_ALLOWEDIPS = 2,
    WGPEER_HAS_PUBLIC_KEY = 4,
    WGPEER_HAS_PRESHARED_KEY = 8,
    WGPEER_HAS_PERSISTENT_KEEPALIVE_INTERVAL = 16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wgpeer {
    pub flags: u32,
    pub public_key: [u8; 32usize],
    pub preshared_key: [u8; 32usize],
    pub endpoint: wgpeer__bindgen_ty_1,
    pub last_handshake_time: timespec64,
    pub rx_bytes: u64,
    pub tx_bytes: u64,
    pub persistent_keepalive_interval: u16,
    pub first_allowedip: *mut wgallowedip,
    pub last_allowedip: *mut wgallowedip,
    pub next_peer: *mut wgpeer,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wgpeer__bindgen_ty_1 {
    pub addr: sockaddr,
    pub addr4: sockaddr_in,
    pub addr6: sockaddr_in6,
    _bindgen_union_align: [u32; 7usize],
}
#[test]
fn bindgen_test_layout_wgpeer__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wgpeer__bindgen_ty_1>(),
        28usize,
        concat!("Size of: ", stringify!(wgpeer__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wgpeer__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wgpeer__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgpeer__bindgen_ty_1>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wgpeer__bindgen_ty_1),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgpeer__bindgen_ty_1>())).addr4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wgpeer__bindgen_ty_1),
            "::",
            stringify!(addr4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgpeer__bindgen_ty_1>())).addr6 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wgpeer__bindgen_ty_1),
            "::",
            stringify!(addr6)
        )
    );
}
#[test]
fn bindgen_test_layout_wgpeer() {
    assert_eq!(
        ::std::mem::size_of::<wgpeer>(),
        160usize,
        concat!("Size of: ", stringify!(wgpeer))
    );
    assert_eq!(
        ::std::mem::align_of::<wgpeer>(),
        8usize,
        concat!("Alignment of ", stringify!(wgpeer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgpeer>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wgpeer),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgpeer>())).public_key as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(wgpeer),
            "::",
            stringify!(public_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgpeer>())).preshared_key as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(wgpeer),
            "::",
            stringify!(preshared_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgpeer>())).endpoint as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(wgpeer),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgpeer>())).last_handshake_time as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(wgpeer),
            "::",
            stringify!(last_handshake_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgpeer>())).rx_bytes as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(wgpeer),
            "::",
            stringify!(rx_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgpeer>())).tx_bytes as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(wgpeer),
            "::",
            stringify!(tx_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wgpeer>())).persistent_keepalive_interval as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(wgpeer),
            "::",
            stringify!(persistent_keepalive_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgpeer>())).first_allowedip as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(wgpeer),
            "::",
            stringify!(first_allowedip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgpeer>())).last_allowedip as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(wgpeer),
            "::",
            stringify!(last_allowedip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgpeer>())).next_peer as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(wgpeer),
            "::",
            stringify!(next_peer)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum wgdevice_flag_ {
    WGDEVICE_REPLACE_PEERS = 1,
    WGDEVICE_HAS_PRIVATE_KEY = 2,
    WGDEVICE_HAS_PUBLIC_KEY = 4,
    WGDEVICE_HAS_LISTEN_PORT = 8,
    WGDEVICE_HAS_FWMARK = 16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wgdevice {
    pub name: [::std::os::raw::c_char; 16usize],
    pub ifindex: u32,
    pub flags: u32,
    pub public_key: [u8; 32usize],
    pub private_key: [u8; 32usize],
    pub fwmark: u32,
    pub listen_port: u16,
    pub first_peer: *mut wgpeer,
    pub last_peer: *mut wgpeer,
}
#[test]
fn bindgen_test_layout_wgdevice() {
    assert_eq!(
        ::std::mem::size_of::<wgdevice>(),
        112usize,
        concat!("Size of: ", stringify!(wgdevice))
    );
    assert_eq!(
        ::std::mem::align_of::<wgdevice>(),
        8usize,
        concat!("Alignment of ", stringify!(wgdevice))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgdevice>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wgdevice),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgdevice>())).ifindex as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wgdevice),
            "::",
            stringify!(ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgdevice>())).flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(wgdevice),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgdevice>())).public_key as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wgdevice),
            "::",
            stringify!(public_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgdevice>())).private_key as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wgdevice),
            "::",
            stringify!(private_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgdevice>())).fwmark as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(wgdevice),
            "::",
            stringify!(fwmark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgdevice>())).listen_port as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(wgdevice),
            "::",
            stringify!(listen_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgdevice>())).first_peer as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(wgdevice),
            "::",
            stringify!(first_peer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wgdevice>())).last_peer as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(wgdevice),
            "::",
            stringify!(last_peer)
        )
    );
}
extern "C" {
    pub fn ipc_set_device(dev: *mut wgdevice) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipc_get_device(
        dev: *mut *mut wgdevice,
        interface: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipc_list_devices() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ipc_free_device(dev: *mut wgdevice);
}
extern "C" {
    pub fn curve25519(mypublic: *mut u8, secret: *const u8, basepoint: *const u8);
}
extern "C" {
    pub fn curve25519_generate_public(pub_: *mut u8, secret: *const u8);
}
